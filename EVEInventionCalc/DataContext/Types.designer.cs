#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EVEInventionCalc.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DataDump")]
	public partial class TypesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertinvType(invType instance);
    partial void UpdateinvType(invType instance);
    partial void DeleteinvType(invType instance);
    partial void InsertinvBlueprintType(invBlueprintType instance);
    partial void UpdateinvBlueprintType(invBlueprintType instance);
    partial void DeleteinvBlueprintType(invBlueprintType instance);
    partial void InsertinvTypeMaterial(invTypeMaterial instance);
    partial void UpdateinvTypeMaterial(invTypeMaterial instance);
    partial void DeleteinvTypeMaterial(invTypeMaterial instance);
    partial void InsertramTypeRequirement(ramTypeRequirement instance);
    partial void UpdateramTypeRequirement(ramTypeRequirement instance);
    partial void DeleteramTypeRequirement(ramTypeRequirement instance);
    partial void InsertinvGroup(invGroup instance);
    partial void UpdateinvGroup(invGroup instance);
    partial void DeleteinvGroup(invGroup instance);
    partial void InsertinvMetaType(invMetaType instance);
    partial void UpdateinvMetaType(invMetaType instance);
    partial void DeleteinvMetaType(invMetaType instance);
    #endregion
		
		public TypesDataContext() : 
				base(global::EVEInventionCalc.Properties.Settings.Default.DataDumpConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public TypesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TypesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TypesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TypesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<invType> invTypes
		{
			get
			{
				return this.GetTable<invType>();
			}
		}
		
		public System.Data.Linq.Table<invBlueprintType> invBlueprintTypes
		{
			get
			{
				return this.GetTable<invBlueprintType>();
			}
		}
		
		public System.Data.Linq.Table<invTypeMaterial> invTypeMaterials
		{
			get
			{
				return this.GetTable<invTypeMaterial>();
			}
		}
		
		public System.Data.Linq.Table<ramTypeRequirement> ramTypeRequirements
		{
			get
			{
				return this.GetTable<ramTypeRequirement>();
			}
		}
		
		public System.Data.Linq.Table<invGroup> invGroups
		{
			get
			{
				return this.GetTable<invGroup>();
			}
		}
		
		public System.Data.Linq.Table<invMetaType> invMetaTypes
		{
			get
			{
				return this.GetTable<invMetaType>();
			}
		}
	}
	
	[Table(Name="dbo.invTypes")]
	public partial class invType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private System.Nullable<short> _groupID;
		
		private string _typeName;
		
		private string _description;
		
		private System.Nullable<int> _graphicID;
		
		private System.Nullable<double> _radius;
		
		private System.Nullable<double> _mass;
		
		private System.Nullable<double> _volume;
		
		private System.Nullable<double> _capacity;
		
		private System.Nullable<int> _portionSize;
		
		private System.Nullable<byte> _raceID;
		
		private System.Nullable<decimal> _basePrice;
		
		private System.Nullable<bool> _published;
		
		private System.Nullable<short> _marketGroupID;
		
		private System.Nullable<double> _chanceOfDuplicating;
		
		private System.Nullable<int> _iconID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OngroupIDChanging(System.Nullable<short> value);
    partial void OngroupIDChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OngraphicIDChanging(System.Nullable<int> value);
    partial void OngraphicIDChanged();
    partial void OnradiusChanging(System.Nullable<double> value);
    partial void OnradiusChanged();
    partial void OnmassChanging(System.Nullable<double> value);
    partial void OnmassChanged();
    partial void OnvolumeChanging(System.Nullable<double> value);
    partial void OnvolumeChanged();
    partial void OncapacityChanging(System.Nullable<double> value);
    partial void OncapacityChanged();
    partial void OnportionSizeChanging(System.Nullable<int> value);
    partial void OnportionSizeChanged();
    partial void OnraceIDChanging(System.Nullable<byte> value);
    partial void OnraceIDChanged();
    partial void OnbasePriceChanging(System.Nullable<decimal> value);
    partial void OnbasePriceChanged();
    partial void OnpublishedChanging(System.Nullable<bool> value);
    partial void OnpublishedChanged();
    partial void OnmarketGroupIDChanging(System.Nullable<short> value);
    partial void OnmarketGroupIDChanged();
    partial void OnchanceOfDuplicatingChanging(System.Nullable<double> value);
    partial void OnchanceOfDuplicatingChanged();
    partial void OniconIDChanging(System.Nullable<int> value);
    partial void OniconIDChanged();
    #endregion
		
		public invType()
		{
			OnCreated();
		}
		
		[Column(Storage="_typeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_groupID", DbType="SmallInt")]
		public System.Nullable<short> groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_typeName", DbType="NVarChar(100)")]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(3000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_graphicID", DbType="Int")]
		public System.Nullable<int> graphicID
		{
			get
			{
				return this._graphicID;
			}
			set
			{
				if ((this._graphicID != value))
				{
					this.OngraphicIDChanging(value);
					this.SendPropertyChanging();
					this._graphicID = value;
					this.SendPropertyChanged("graphicID");
					this.OngraphicIDChanged();
				}
			}
		}
		
		[Column(Storage="_radius", DbType="Float")]
		public System.Nullable<double> radius
		{
			get
			{
				return this._radius;
			}
			set
			{
				if ((this._radius != value))
				{
					this.OnradiusChanging(value);
					this.SendPropertyChanging();
					this._radius = value;
					this.SendPropertyChanged("radius");
					this.OnradiusChanged();
				}
			}
		}
		
		[Column(Storage="_mass", DbType="Float")]
		public System.Nullable<double> mass
		{
			get
			{
				return this._mass;
			}
			set
			{
				if ((this._mass != value))
				{
					this.OnmassChanging(value);
					this.SendPropertyChanging();
					this._mass = value;
					this.SendPropertyChanged("mass");
					this.OnmassChanged();
				}
			}
		}
		
		[Column(Storage="_volume", DbType="Float")]
		public System.Nullable<double> volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if ((this._volume != value))
				{
					this.OnvolumeChanging(value);
					this.SendPropertyChanging();
					this._volume = value;
					this.SendPropertyChanged("volume");
					this.OnvolumeChanged();
				}
			}
		}
		
		[Column(Storage="_capacity", DbType="Float")]
		public System.Nullable<double> capacity
		{
			get
			{
				return this._capacity;
			}
			set
			{
				if ((this._capacity != value))
				{
					this.OncapacityChanging(value);
					this.SendPropertyChanging();
					this._capacity = value;
					this.SendPropertyChanged("capacity");
					this.OncapacityChanged();
				}
			}
		}
		
		[Column(Storage="_portionSize", DbType="Int")]
		public System.Nullable<int> portionSize
		{
			get
			{
				return this._portionSize;
			}
			set
			{
				if ((this._portionSize != value))
				{
					this.OnportionSizeChanging(value);
					this.SendPropertyChanging();
					this._portionSize = value;
					this.SendPropertyChanged("portionSize");
					this.OnportionSizeChanged();
				}
			}
		}
		
		[Column(Storage="_raceID", DbType="TinyInt")]
		public System.Nullable<byte> raceID
		{
			get
			{
				return this._raceID;
			}
			set
			{
				if ((this._raceID != value))
				{
					this.OnraceIDChanging(value);
					this.SendPropertyChanging();
					this._raceID = value;
					this.SendPropertyChanged("raceID");
					this.OnraceIDChanged();
				}
			}
		}
		
		[Column(Storage="_basePrice", DbType="Money")]
		public System.Nullable<decimal> basePrice
		{
			get
			{
				return this._basePrice;
			}
			set
			{
				if ((this._basePrice != value))
				{
					this.OnbasePriceChanging(value);
					this.SendPropertyChanging();
					this._basePrice = value;
					this.SendPropertyChanged("basePrice");
					this.OnbasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_published", DbType="Bit")]
		public System.Nullable<bool> published
		{
			get
			{
				return this._published;
			}
			set
			{
				if ((this._published != value))
				{
					this.OnpublishedChanging(value);
					this.SendPropertyChanging();
					this._published = value;
					this.SendPropertyChanged("published");
					this.OnpublishedChanged();
				}
			}
		}
		
		[Column(Storage="_marketGroupID", DbType="SmallInt")]
		public System.Nullable<short> marketGroupID
		{
			get
			{
				return this._marketGroupID;
			}
			set
			{
				if ((this._marketGroupID != value))
				{
					this.OnmarketGroupIDChanging(value);
					this.SendPropertyChanging();
					this._marketGroupID = value;
					this.SendPropertyChanged("marketGroupID");
					this.OnmarketGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_chanceOfDuplicating", DbType="Float")]
		public System.Nullable<double> chanceOfDuplicating
		{
			get
			{
				return this._chanceOfDuplicating;
			}
			set
			{
				if ((this._chanceOfDuplicating != value))
				{
					this.OnchanceOfDuplicatingChanging(value);
					this.SendPropertyChanging();
					this._chanceOfDuplicating = value;
					this.SendPropertyChanged("chanceOfDuplicating");
					this.OnchanceOfDuplicatingChanged();
				}
			}
		}
		
		[Column(Storage="_iconID", DbType="Int")]
		public System.Nullable<int> iconID
		{
			get
			{
				return this._iconID;
			}
			set
			{
				if ((this._iconID != value))
				{
					this.OniconIDChanging(value);
					this.SendPropertyChanging();
					this._iconID = value;
					this.SendPropertyChanged("iconID");
					this.OniconIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.invBlueprintTypes")]
	public partial class invBlueprintType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _blueprintTypeID;
		
		private System.Nullable<int> _parentBlueprintTypeID;
		
		private System.Nullable<int> _productTypeID;
		
		private System.Nullable<int> _productionTime;
		
		private System.Nullable<short> _techLevel;
		
		private System.Nullable<int> _researchProductivityTime;
		
		private System.Nullable<int> _researchMaterialTime;
		
		private System.Nullable<int> _researchCopyTime;
		
		private System.Nullable<int> _researchTechTime;
		
		private System.Nullable<int> _productivityModifier;
		
		private System.Nullable<short> _materialModifier;
		
		private System.Nullable<short> _wasteFactor;
		
		private System.Nullable<int> _maxProductionLimit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnblueprintTypeIDChanging(int value);
    partial void OnblueprintTypeIDChanged();
    partial void OnparentBlueprintTypeIDChanging(System.Nullable<int> value);
    partial void OnparentBlueprintTypeIDChanged();
    partial void OnproductTypeIDChanging(System.Nullable<int> value);
    partial void OnproductTypeIDChanged();
    partial void OnproductionTimeChanging(System.Nullable<int> value);
    partial void OnproductionTimeChanged();
    partial void OntechLevelChanging(System.Nullable<short> value);
    partial void OntechLevelChanged();
    partial void OnresearchProductivityTimeChanging(System.Nullable<int> value);
    partial void OnresearchProductivityTimeChanged();
    partial void OnresearchMaterialTimeChanging(System.Nullable<int> value);
    partial void OnresearchMaterialTimeChanged();
    partial void OnresearchCopyTimeChanging(System.Nullable<int> value);
    partial void OnresearchCopyTimeChanged();
    partial void OnresearchTechTimeChanging(System.Nullable<int> value);
    partial void OnresearchTechTimeChanged();
    partial void OnproductivityModifierChanging(System.Nullable<int> value);
    partial void OnproductivityModifierChanged();
    partial void OnmaterialModifierChanging(System.Nullable<short> value);
    partial void OnmaterialModifierChanged();
    partial void OnwasteFactorChanging(System.Nullable<short> value);
    partial void OnwasteFactorChanged();
    partial void OnmaxProductionLimitChanging(System.Nullable<int> value);
    partial void OnmaxProductionLimitChanged();
    #endregion
		
		public invBlueprintType()
		{
			OnCreated();
		}
		
		[Column(Storage="_blueprintTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int blueprintTypeID
		{
			get
			{
				return this._blueprintTypeID;
			}
			set
			{
				if ((this._blueprintTypeID != value))
				{
					this.OnblueprintTypeIDChanging(value);
					this.SendPropertyChanging();
					this._blueprintTypeID = value;
					this.SendPropertyChanged("blueprintTypeID");
					this.OnblueprintTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_parentBlueprintTypeID", DbType="Int")]
		public System.Nullable<int> parentBlueprintTypeID
		{
			get
			{
				return this._parentBlueprintTypeID;
			}
			set
			{
				if ((this._parentBlueprintTypeID != value))
				{
					this.OnparentBlueprintTypeIDChanging(value);
					this.SendPropertyChanging();
					this._parentBlueprintTypeID = value;
					this.SendPropertyChanged("parentBlueprintTypeID");
					this.OnparentBlueprintTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_productTypeID", DbType="Int")]
		public System.Nullable<int> productTypeID
		{
			get
			{
				return this._productTypeID;
			}
			set
			{
				if ((this._productTypeID != value))
				{
					this.OnproductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._productTypeID = value;
					this.SendPropertyChanged("productTypeID");
					this.OnproductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_productionTime", DbType="Int")]
		public System.Nullable<int> productionTime
		{
			get
			{
				return this._productionTime;
			}
			set
			{
				if ((this._productionTime != value))
				{
					this.OnproductionTimeChanging(value);
					this.SendPropertyChanging();
					this._productionTime = value;
					this.SendPropertyChanged("productionTime");
					this.OnproductionTimeChanged();
				}
			}
		}
		
		[Column(Storage="_techLevel", DbType="SmallInt")]
		public System.Nullable<short> techLevel
		{
			get
			{
				return this._techLevel;
			}
			set
			{
				if ((this._techLevel != value))
				{
					this.OntechLevelChanging(value);
					this.SendPropertyChanging();
					this._techLevel = value;
					this.SendPropertyChanged("techLevel");
					this.OntechLevelChanged();
				}
			}
		}
		
		[Column(Storage="_researchProductivityTime", DbType="Int")]
		public System.Nullable<int> researchProductivityTime
		{
			get
			{
				return this._researchProductivityTime;
			}
			set
			{
				if ((this._researchProductivityTime != value))
				{
					this.OnresearchProductivityTimeChanging(value);
					this.SendPropertyChanging();
					this._researchProductivityTime = value;
					this.SendPropertyChanged("researchProductivityTime");
					this.OnresearchProductivityTimeChanged();
				}
			}
		}
		
		[Column(Storage="_researchMaterialTime", DbType="Int")]
		public System.Nullable<int> researchMaterialTime
		{
			get
			{
				return this._researchMaterialTime;
			}
			set
			{
				if ((this._researchMaterialTime != value))
				{
					this.OnresearchMaterialTimeChanging(value);
					this.SendPropertyChanging();
					this._researchMaterialTime = value;
					this.SendPropertyChanged("researchMaterialTime");
					this.OnresearchMaterialTimeChanged();
				}
			}
		}
		
		[Column(Storage="_researchCopyTime", DbType="Int")]
		public System.Nullable<int> researchCopyTime
		{
			get
			{
				return this._researchCopyTime;
			}
			set
			{
				if ((this._researchCopyTime != value))
				{
					this.OnresearchCopyTimeChanging(value);
					this.SendPropertyChanging();
					this._researchCopyTime = value;
					this.SendPropertyChanged("researchCopyTime");
					this.OnresearchCopyTimeChanged();
				}
			}
		}
		
		[Column(Storage="_researchTechTime", DbType="Int")]
		public System.Nullable<int> researchTechTime
		{
			get
			{
				return this._researchTechTime;
			}
			set
			{
				if ((this._researchTechTime != value))
				{
					this.OnresearchTechTimeChanging(value);
					this.SendPropertyChanging();
					this._researchTechTime = value;
					this.SendPropertyChanged("researchTechTime");
					this.OnresearchTechTimeChanged();
				}
			}
		}
		
		[Column(Storage="_productivityModifier", DbType="Int")]
		public System.Nullable<int> productivityModifier
		{
			get
			{
				return this._productivityModifier;
			}
			set
			{
				if ((this._productivityModifier != value))
				{
					this.OnproductivityModifierChanging(value);
					this.SendPropertyChanging();
					this._productivityModifier = value;
					this.SendPropertyChanged("productivityModifier");
					this.OnproductivityModifierChanged();
				}
			}
		}
		
		[Column(Storage="_materialModifier", DbType="SmallInt")]
		public System.Nullable<short> materialModifier
		{
			get
			{
				return this._materialModifier;
			}
			set
			{
				if ((this._materialModifier != value))
				{
					this.OnmaterialModifierChanging(value);
					this.SendPropertyChanging();
					this._materialModifier = value;
					this.SendPropertyChanged("materialModifier");
					this.OnmaterialModifierChanged();
				}
			}
		}
		
		[Column(Storage="_wasteFactor", DbType="SmallInt")]
		public System.Nullable<short> wasteFactor
		{
			get
			{
				return this._wasteFactor;
			}
			set
			{
				if ((this._wasteFactor != value))
				{
					this.OnwasteFactorChanging(value);
					this.SendPropertyChanging();
					this._wasteFactor = value;
					this.SendPropertyChanged("wasteFactor");
					this.OnwasteFactorChanged();
				}
			}
		}
		
		[Column(Storage="_maxProductionLimit", DbType="Int")]
		public System.Nullable<int> maxProductionLimit
		{
			get
			{
				return this._maxProductionLimit;
			}
			set
			{
				if ((this._maxProductionLimit != value))
				{
					this.OnmaxProductionLimitChanging(value);
					this.SendPropertyChanging();
					this._maxProductionLimit = value;
					this.SendPropertyChanged("maxProductionLimit");
					this.OnmaxProductionLimitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.invTypeMaterials")]
	public partial class invTypeMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private int _materialTypeID;
		
		private int _quantity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnmaterialTypeIDChanging(int value);
    partial void OnmaterialTypeIDChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public invTypeMaterial()
		{
			OnCreated();
		}
		
		[Column(Storage="_typeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_materialTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int materialTypeID
		{
			get
			{
				return this._materialTypeID;
			}
			set
			{
				if ((this._materialTypeID != value))
				{
					this.OnmaterialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._materialTypeID = value;
					this.SendPropertyChanged("materialTypeID");
					this.OnmaterialTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ramTypeRequirements")]
	public partial class ramTypeRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private byte _activityID;
		
		private int _requiredTypeID;
		
		private System.Nullable<int> _quantity;
		
		private System.Nullable<double> _damagePerJob;
		
		private System.Nullable<bool> _recycle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnactivityIDChanging(byte value);
    partial void OnactivityIDChanged();
    partial void OnrequiredTypeIDChanging(int value);
    partial void OnrequiredTypeIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OndamagePerJobChanging(System.Nullable<double> value);
    partial void OndamagePerJobChanged();
    partial void OnrecycleChanging(System.Nullable<bool> value);
    partial void OnrecycleChanged();
    #endregion
		
		public ramTypeRequirement()
		{
			OnCreated();
		}
		
		[Column(Storage="_typeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_activityID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte activityID
		{
			get
			{
				return this._activityID;
			}
			set
			{
				if ((this._activityID != value))
				{
					this.OnactivityIDChanging(value);
					this.SendPropertyChanging();
					this._activityID = value;
					this.SendPropertyChanged("activityID");
					this.OnactivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_requiredTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int requiredTypeID
		{
			get
			{
				return this._requiredTypeID;
			}
			set
			{
				if ((this._requiredTypeID != value))
				{
					this.OnrequiredTypeIDChanging(value);
					this.SendPropertyChanging();
					this._requiredTypeID = value;
					this.SendPropertyChanged("requiredTypeID");
					this.OnrequiredTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[Column(Storage="_damagePerJob", DbType="Float")]
		public System.Nullable<double> damagePerJob
		{
			get
			{
				return this._damagePerJob;
			}
			set
			{
				if ((this._damagePerJob != value))
				{
					this.OndamagePerJobChanging(value);
					this.SendPropertyChanging();
					this._damagePerJob = value;
					this.SendPropertyChanged("damagePerJob");
					this.OndamagePerJobChanged();
				}
			}
		}
		
		[Column(Storage="_recycle", DbType="Bit")]
		public System.Nullable<bool> recycle
		{
			get
			{
				return this._recycle;
			}
			set
			{
				if ((this._recycle != value))
				{
					this.OnrecycleChanging(value);
					this.SendPropertyChanging();
					this._recycle = value;
					this.SendPropertyChanged("recycle");
					this.OnrecycleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.invGroups")]
	public partial class invGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _groupID;
		
		private System.Nullable<byte> _categoryID;
		
		private string _groupName;
		
		private string _description;
		
		private System.Nullable<int> _iconID;
		
		private System.Nullable<bool> _useBasePrice;
		
		private System.Nullable<bool> _allowManufacture;
		
		private System.Nullable<bool> _allowRecycler;
		
		private System.Nullable<bool> _anchored;
		
		private System.Nullable<bool> _anchorable;
		
		private System.Nullable<bool> _fittableNonSingleton;
		
		private System.Nullable<bool> _published;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupIDChanging(short value);
    partial void OngroupIDChanged();
    partial void OncategoryIDChanging(System.Nullable<byte> value);
    partial void OncategoryIDChanged();
    partial void OngroupNameChanging(string value);
    partial void OngroupNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OniconIDChanging(System.Nullable<int> value);
    partial void OniconIDChanged();
    partial void OnuseBasePriceChanging(System.Nullable<bool> value);
    partial void OnuseBasePriceChanged();
    partial void OnallowManufactureChanging(System.Nullable<bool> value);
    partial void OnallowManufactureChanged();
    partial void OnallowRecyclerChanging(System.Nullable<bool> value);
    partial void OnallowRecyclerChanged();
    partial void OnanchoredChanging(System.Nullable<bool> value);
    partial void OnanchoredChanged();
    partial void OnanchorableChanging(System.Nullable<bool> value);
    partial void OnanchorableChanged();
    partial void OnfittableNonSingletonChanging(System.Nullable<bool> value);
    partial void OnfittableNonSingletonChanged();
    partial void OnpublishedChanging(System.Nullable<bool> value);
    partial void OnpublishedChanged();
    #endregion
		
		public invGroup()
		{
			OnCreated();
		}
		
		[Column(Storage="_groupID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_categoryID", DbType="TinyInt")]
		public System.Nullable<byte> categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_groupName", DbType="NVarChar(100)")]
		public string groupName
		{
			get
			{
				return this._groupName;
			}
			set
			{
				if ((this._groupName != value))
				{
					this.OngroupNameChanging(value);
					this.SendPropertyChanging();
					this._groupName = value;
					this.SendPropertyChanged("groupName");
					this.OngroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(3000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_iconID", DbType="Int")]
		public System.Nullable<int> iconID
		{
			get
			{
				return this._iconID;
			}
			set
			{
				if ((this._iconID != value))
				{
					this.OniconIDChanging(value);
					this.SendPropertyChanging();
					this._iconID = value;
					this.SendPropertyChanged("iconID");
					this.OniconIDChanged();
				}
			}
		}
		
		[Column(Storage="_useBasePrice", DbType="Bit")]
		public System.Nullable<bool> useBasePrice
		{
			get
			{
				return this._useBasePrice;
			}
			set
			{
				if ((this._useBasePrice != value))
				{
					this.OnuseBasePriceChanging(value);
					this.SendPropertyChanging();
					this._useBasePrice = value;
					this.SendPropertyChanged("useBasePrice");
					this.OnuseBasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_allowManufacture", DbType="Bit")]
		public System.Nullable<bool> allowManufacture
		{
			get
			{
				return this._allowManufacture;
			}
			set
			{
				if ((this._allowManufacture != value))
				{
					this.OnallowManufactureChanging(value);
					this.SendPropertyChanging();
					this._allowManufacture = value;
					this.SendPropertyChanged("allowManufacture");
					this.OnallowManufactureChanged();
				}
			}
		}
		
		[Column(Storage="_allowRecycler", DbType="Bit")]
		public System.Nullable<bool> allowRecycler
		{
			get
			{
				return this._allowRecycler;
			}
			set
			{
				if ((this._allowRecycler != value))
				{
					this.OnallowRecyclerChanging(value);
					this.SendPropertyChanging();
					this._allowRecycler = value;
					this.SendPropertyChanged("allowRecycler");
					this.OnallowRecyclerChanged();
				}
			}
		}
		
		[Column(Storage="_anchored", DbType="Bit")]
		public System.Nullable<bool> anchored
		{
			get
			{
				return this._anchored;
			}
			set
			{
				if ((this._anchored != value))
				{
					this.OnanchoredChanging(value);
					this.SendPropertyChanging();
					this._anchored = value;
					this.SendPropertyChanged("anchored");
					this.OnanchoredChanged();
				}
			}
		}
		
		[Column(Storage="_anchorable", DbType="Bit")]
		public System.Nullable<bool> anchorable
		{
			get
			{
				return this._anchorable;
			}
			set
			{
				if ((this._anchorable != value))
				{
					this.OnanchorableChanging(value);
					this.SendPropertyChanging();
					this._anchorable = value;
					this.SendPropertyChanged("anchorable");
					this.OnanchorableChanged();
				}
			}
		}
		
		[Column(Storage="_fittableNonSingleton", DbType="Bit")]
		public System.Nullable<bool> fittableNonSingleton
		{
			get
			{
				return this._fittableNonSingleton;
			}
			set
			{
				if ((this._fittableNonSingleton != value))
				{
					this.OnfittableNonSingletonChanging(value);
					this.SendPropertyChanging();
					this._fittableNonSingleton = value;
					this.SendPropertyChanged("fittableNonSingleton");
					this.OnfittableNonSingletonChanged();
				}
			}
		}
		
		[Column(Storage="_published", DbType="Bit")]
		public System.Nullable<bool> published
		{
			get
			{
				return this._published;
			}
			set
			{
				if ((this._published != value))
				{
					this.OnpublishedChanging(value);
					this.SendPropertyChanging();
					this._published = value;
					this.SendPropertyChanged("published");
					this.OnpublishedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.invMetaTypes")]
	public partial class invMetaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private System.Nullable<int> _parentTypeID;
		
		private System.Nullable<short> _metaGroupID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnparentTypeIDChanging(System.Nullable<int> value);
    partial void OnparentTypeIDChanged();
    partial void OnmetaGroupIDChanging(System.Nullable<short> value);
    partial void OnmetaGroupIDChanged();
    #endregion
		
		public invMetaType()
		{
			OnCreated();
		}
		
		[Column(Storage="_typeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_parentTypeID", DbType="Int")]
		public System.Nullable<int> parentTypeID
		{
			get
			{
				return this._parentTypeID;
			}
			set
			{
				if ((this._parentTypeID != value))
				{
					this.OnparentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._parentTypeID = value;
					this.SendPropertyChanged("parentTypeID");
					this.OnparentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_metaGroupID", DbType="SmallInt")]
		public System.Nullable<short> metaGroupID
		{
			get
			{
				return this._metaGroupID;
			}
			set
			{
				if ((this._metaGroupID != value))
				{
					this.OnmetaGroupIDChanging(value);
					this.SendPropertyChanging();
					this._metaGroupID = value;
					this.SendPropertyChanged("metaGroupID");
					this.OnmetaGroupIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
